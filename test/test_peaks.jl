# This uses MATLAB's definition of the `peaks` function to test `inpaint_nans`

peaks(x, y) = 3 * (1 - x)^2 * exp(-(x^2) - (y + 1)^2) -
    10 * (x/5 - x^3 - y^5) * exp(-x^2 - y^2) -
    1/3 * exp(-(x + 1)^2 - y^2)

xs = LinRange(-3, 3, 50)
ys = LinRange(-3, 3, 50)
Z = [peaks(x, y) for y in ys, x in xs]

# Remove some values in blocks
Z_with_NaNs = copy(Z)
Z_with_NaNs[2:10, 2:10] .= NaN
Z_with_NaNs[20:40, 20:35] .= NaN
# Remove some values at random indices (pregenerated for determinism of the test)
# pregenerated via `rand(CartesianIndices(size(Z)), 26)`
# Note I made sure no NaN on the border, need to figure out why different from MATLAB there
idx = [
 CartesianIndex(47, 28)
 CartesianIndex(17, 48)
 CartesianIndex(6, 38)
 CartesianIndex(38, 19)
 CartesianIndex(8, 44)
 CartesianIndex(14, 45)
 CartesianIndex(7, 15)
 CartesianIndex(39, 35)
 CartesianIndex(32, 14)
 CartesianIndex(25, 17)
 CartesianIndex(22, 13)
 CartesianIndex(43, 15)
 CartesianIndex(42, 8)
 CartesianIndex(12, 10)
 CartesianIndex(3, 6)
 CartesianIndex(46, 10)
 CartesianIndex(17, 31)
 CartesianIndex(32, 3)
 CartesianIndex(22, 3)
 CartesianIndex(21, 28)
 CartesianIndex(39, 23)
 CartesianIndex(29, 10)
 CartesianIndex(25, 10)
 CartesianIndex(9, 38)
 CartesianIndex(17, 36)
 CartesianIndex(43, 36)
]
Z_with_NaNs[idx] .= NaN

Z_reconstructed = inpaint_nans(Z_with_NaNs)

#using Plots
#contourf(ys, xs, Z)
#contourf(ys, xs, Z_with_NaNs)
#contourf(ys, xs, Z_reconstructed)

#=
MATLAB code used to compare both values:

Z = peaks(50) ;
Z_with_NaNs = Z ;
Z_with_NaNs(2:10, 2:10) = nan ;
Z_with_NaNs(20:40, 20:35) = nan ;
Z_with_NaNs(47, 28) = nan ;
Z_with_NaNs(17, 48) = nan ;
Z_with_NaNs(6, 38) = nan ;
Z_with_NaNs(38, 19) = nan ;
Z_with_NaNs(8, 44) = nan ;
Z_with_NaNs(14, 45) = nan ;
Z_with_NaNs(7, 15) = nan ;
Z_with_NaNs(39, 35) = nan ;
Z_with_NaNs(32, 14) = nan ;
Z_with_NaNs(25, 17) = nan ;
Z_with_NaNs(22, 13) = nan ;
Z_with_NaNs(43, 15) = nan ;
Z_with_NaNs(42, 8) = nan ;
Z_with_NaNs(12, 10) = nan ;
Z_with_NaNs(3, 6) = nan ;
Z_with_NaNs(46, 10) = nan ;
Z_with_NaNs(17, 31) = nan ;
Z_with_NaNs(32, 3) = nan ;
Z_with_NaNs(22, 3) = nan ;
Z_with_NaNs(21, 28) = nan ;
Z_with_NaNs(39, 23) = nan ;
Z_with_NaNs(29, 10) = nan ;
Z_with_NaNs(25, 10) = nan ;
Z_with_NaNs(9, 38) = nan ;
Z_with_NaNs(17, 36) = nan ;
Z_with_NaNs(43, 36) = nan ;
Z_reconstructed = inpaint_nans(Z_with_NaNs) ;
inan = find(isnan(Z_with_NaNs)) ;
format long
for_test_with_Julia = Z_reconstructed(inan)

=#

#output from MATLAB (with added `[` and `]` to create an array in Julia):
for_test_with_Julia = [
   0.000524190936542
   0.000892917084835
   0.001231203122125
   0.001530961918978
   0.001776582009402
   0.001946298957917
   0.002015130130208
   0.001959244684752
   0.001760912625428
   0.000995353069910
   0.001703546930828
   0.002346426629075
   0.002908252721493
   0.003360310262669
   0.003664348170048
   0.003780553931901
   0.003679913490433
   0.003358843425818
  -0.082977923168344
  -0.060967205346426
   0.001564714055946
   0.002656554662990
   0.003669673484876
   0.004587128650529
   0.005369912112034
   0.005960972066570
   0.006296136452793
   0.006322670614522
   0.006023602349816
   0.002264792624021
   0.003792291273601
   0.005260341297355
   0.006662029283736
   0.007954793768527
   0.009063037027159
   0.009888208275220
   0.010329492697136
   0.010317874842432
   0.003105302287103
   0.005105579477248
   0.007112070512643
   0.009144135242752
   0.011169669393738
   0.013104198065278
   0.014814282688221
   0.016131816493082
   0.016891888421425
   0.004062843246394
   0.006530320715989
   0.009128881403085
   0.011924373969747
   0.014919579277297
   0.018048765417082
   0.021166888396321
   0.024042265009801
   0.026378556518872
   0.005070331242245
   0.007928941151635
   0.011107413458809
   0.014738342738280
   0.018895586247725
   0.023586211666905
   0.028718421504471
   0.034051045648525
   0.039159994469727
   0.039965223376597
   0.006011652248381
   0.009097147252529
   0.012739040154921
   0.017149435253745
   0.022519235686030
   0.029014115229757
   0.036719221211213
   0.045523604303906
   0.054972781420604
   0.006733130158356
   0.009801816186886
   0.013652832020552
   0.018574855570641
   0.024926345895925
   0.033147438260367
   0.043691141967525
   0.056833335838727
   0.072352271571436
   0.105365529905136
  -1.618282833804110
  -1.497267965647276
   0.046271750087396
  -1.510242837063185
  -1.655236008857604
  -0.092452221518466
   0.837998109712890
  -1.675757496829375
   4.058704101509400
   3.303725786115486
   3.010000179112509
   2.522291681674896
   1.935746467902899
   1.335662393275995
   0.786570376531487
   0.329338606050414
  -0.012197205081500
  -0.219715293176765
  -0.271342045055716
  -0.140885820915423
   0.193382373136079
   0.734366350133840
   1.453343741320029
   2.285522807425308
   3.137187987266910
   3.902655575371368
   4.484936895565680
   4.811338538650881
   4.884100956149242
   4.677905529927142
   3.591126775767304
   3.386447863212903
   2.989337073193747
   2.491131616370283
   1.967775763503891
   1.478233500917200
   1.064419264667986
   0.755700256451498
   0.575936971553203
   0.548639684044662
   0.696535461394142
   1.034831663368313
   1.560972052276639
   2.245856661198775
   3.031261516232242
   3.835708342912014
   4.567521216887491
   5.140962089145491
   5.490987102196421
   5.588065337273100
   5.405501982662078
   3.605233416187028
   3.517369798328897
   3.238505914830575
   2.856080916102922
   2.438327328115982
   2.038935238332771
   1.699176128734321
   1.451028659062252
   1.321024608624232
   1.332604751914265
   1.504965505117354
   1.848121634334022
   2.356060966109629
   3.001213663193204
   3.733280355650498
   4.483827186616113
   5.175726393091872
   5.734560968664276
   6.098333394353829
   6.221692291696006
   6.063594921085699
   3.341375927381859
   3.401630927952664
   3.272023813496515
   3.033055856033709
   2.746169753408230
   2.460624587008587
   2.216422530367324
   2.046431551775691
   1.978217374330750
   2.034695793306412
   2.232665034619656
   2.579223674569509
   3.067313708084973
   3.672397877199590
   4.352124602865118
   5.049771004327265
   5.700732274233967
   6.239966411603713
   6.607543306248620
   6.749179057301022
   6.608577265130842
   2.841406543618855
   3.073532804333599
   3.117989559248126
   3.043883088976620
   2.905711250962444
   2.748933015961758
   2.612252629659662
   2.528752116436833
   2.526448970567674
   2.627991758319923
   2.849123571353361
   3.196048485643629
   3.662517177344084
   4.227857296215729
   4.857030700341325
   5.503103195968898
   6.111520288024703
   6.624662759262931
   6.984595819890920
   7.131826672881629
   6.998414420275649
   2.190019423511399
   2.601708428908955
   2.830365825122384
   2.929688217554329
   2.946470482685263
   2.922536980717503
   2.895324118085460
   2.897909094125158
   2.958680799570325
   3.100495265633434
   3.339167858146428
   3.681457636344871
   4.123079551548448
   4.647486879893820
   5.226037260307995
   5.819689884995333
   6.381729944675424
   6.860402293707662
   7.199949313652544
   7.338482295429104
   7.201387711751811
   1.499139374993554
   2.077496715949745
   2.480862500159245
   2.745290805033413
   2.909044909354082
   3.009999054711618
   3.084060876099437
   3.164052562237172
   3.278692758590536
   3.451406153159524
   3.698837274032318
   4.029183770353351
   4.440701411240623
   4.920839563497176
   5.446355722184091
   5.984435695871299
   6.494407530043616
   6.929222805421420
   7.235611799810245
   7.351755425862548
   7.201415274703308
   0.885016119166240
   1.597012673855490
   2.145752596237636
   2.549799558346875
   2.838369589018706
   3.044712526363429
   3.202546971787209
   3.343920620173898
   3.497638189058365
   3.687799568036736
   3.932267095291995
   4.241119910599871
   4.615336749659054
   5.046016353918342
   5.514354690961489
   5.992362415566000
   6.443993319418488
   6.826063242378143
   7.088155108119644
   7.170665518954583
   7.000212551996396
   0.444127421372212
   1.241927202865674
   1.891405934633460
   2.396049536882029
   2.776032071324962
   3.059162539657614
   3.276015392218660
   3.457078065858159
   3.630770243754484
   3.821739892109032
   4.049191032549644
   4.325257739082376
   4.653617120577440
   5.028598400557165
   5.434972531049240
   5.848414509272132
   6.236380038907392
   6.558913566359990
   6.768779902667526
   6.810320208124928
   6.616552991985777
   1.125669762738571
   0.234178621386919
   1.063963138806115
   1.762313356438778
   2.321604801720032
   2.753546819461227
   3.079811056900033
   3.326819542007581
   3.522614178197685
   3.694653529900627
   3.867900861955436
   4.062922469636296
   4.293997387996773
   4.567443092727046
   4.880445382869758
   5.220618694730531
   5.566336287206722
   5.887626529185222
   6.147224775907645
   6.301282351485897
   6.299307054029278
   6.083134559152126
   0.264894345542438
   1.076856030915241
   1.774440508410309
   2.343402920692643
   2.788064330790414
   3.123625079303142
   3.371569155662293
   3.556730698083264
   3.705102900233426
   3.841791282315147
   3.988816822422822
   4.162787954493947
   4.372722399047304
   4.618424828167011
   4.889765982395210
   5.166985865012295
   5.421849209861442
   5.619240212448829
   5.718705806130448
   5.675600280955675
   5.441842193010911
  -2.063770302494032
   0.500357075885665
   1.257272796087366
   1.915098519986817
   2.456945589025479
   2.881179056123067
   3.196717299162048
   3.419747336724340
   3.571423200076258
   3.675974797682277
   3.758667020428136
   3.843281992750833
   3.949181382962353
   4.088380710762411
   4.263266376798683
   4.465516054665831
   4.676470942697051
   4.868789239539717
   5.008869258938862
   5.059428547925425
   4.981842043840667
   4.738359543565053
   0.871333235466223
   1.553611127227524
   2.148619193817332
   2.639577274596804
   3.020545159819613
   3.294911486989527
   3.473684043786208
   3.574176671585911
   3.618777716027334
   3.633151069389326
   3.643423506597562
   3.672454468237427
   3.735863721606598
   3.838815239712328
   3.974461773598729
   4.124481490906896
   4.261496215326068
   4.352635109130163
   4.363337448944828
   4.260782386887404
   4.017049487968469
   1.293407543379991
   1.899485519808580
   2.425510103675624
   2.856217108040291
   3.183171708582464
   3.405452463760821
   3.529341587271061
   3.568305901874769
   3.542888438352655
   3.479505392981600
   3.407422477317637
   3.354029666137665
   3.339450706706176
   3.372041668662171
   3.446196017971053
   3.543144061749750
   3.634443737020205
   3.687044570604866
   3.668518390895146
   3.551430520062498
   3.316793179665248
   1.685522962861113
   2.227555369240467
   2.691831397927913
   3.065226602040016
   3.338780525571426
   3.508703589551252
   3.577046023585503
   3.553295887875573
   3.455960014195914
   3.312409866145257
   3.155784744534299
   3.019070815015181
   2.927888702849440
   2.894315763560597
   2.913862934931114
   2.966627816586451
   3.022166205868405
   3.046413846909611
   3.008542203489772
   2.886108519464099
   2.668112116019169
   1.983688058196502
   2.479172954107374
   2.895405165081570
   3.222107223485965
   3.451659232462958
   3.578625889335373
   3.601092962973260
   3.524185991177577
   3.363817581320750
   3.147972398856197
   2.913703360272218
   2.699944619676161
   2.538264160821292
   2.444794079699932
   2.416272032188319
   2.431579823469110
   2.458113512516453
   2.460669271534457
   2.409924937519339
   2.288183104502720
   2.091521408672010
   0.464570023191391
   0.913419693383921
  -0.226814741701338
  -0.464177315348492
  -0.012638832960302
   0.051311669730636
   0.037340638188638
]

inan = findall(@. isnan(Z_with_NaNs))
@test Z_reconstructed[inan] ≈ for_test_with_Julia
